<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>表达式模板 on 小天天天天快乐</title><link>https://xuexcy.github.io/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E6%9D%BF/</link><description>Recent content in 表达式模板 on 小天天天天快乐</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>薛成韵(xuechengyun)</copyright><lastBuildDate>Fri, 16 May 2025 22:31:29 +0800</lastBuildDate><atom:link href="https://xuexcy.github.io/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E6%9D%BF/index.xml" rel="self" type="application/rss+xml"/><item><title>使用表达式模板做向量计算</title><link>https://xuexcy.github.io/post/%E4%BD%BF%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E6%9D%BF%E5%81%9A%E5%90%91%E9%87%8F%E8%AE%A1%E7%AE%97/</link><pubDate>Fri, 16 May 2025 22:31:29 +0800</pubDate><guid>https://xuexcy.github.io/post/%E4%BD%BF%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E6%9D%BF%E5%81%9A%E5%90%91%E9%87%8F%E8%AE%A1%E7%AE%97/</guid><description>&lt;p>&lt;strong>文中链接跳转失效时，请移步至&lt;a class="link" href="https://github.com/xuexcy/learning_more_cpp_idioms/blob/main/src/expression_template_deps/README.md" target="_blank" rel="noopener"
>github 使用表达式模板做向量计算&lt;/a>查阅&lt;/strong>&lt;/p>
&lt;h1 id="使用表达式模板做向量计算">使用表达式模板做向量计算
&lt;/h1>&lt;h1 id="1-问题-向量计算">1. 问题: 向量计算
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">StdArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StdArray&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StdArray&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 计算 1.2 * a + a * b 并将结果存入 StdArray c
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="2-方案分析">2. 方案分析
&lt;/h1>&lt;h2 id="21-表达式计算a-namejump表达式计算a">2.1 表达式计算&lt;a name="#jump表达式计算">&lt;/a>
&lt;/h2>&lt;h3 id="211-代码实现">2.1.1 代码实现
&lt;/h3>&lt;p>&lt;a class="link" href="./test_array/calculation_deps.h" >./test_array/calculation_deps.h&lt;/a> &lt;code>calculate_by_expression&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">StdArray&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="212-执行步骤">2.1.2 执行步骤
&lt;/h3>&lt;ol>
&lt;li>&lt;code>double result_1 = 1.2 * a[i]&lt;/code>:
&lt;ul>
&lt;li>读取 a[i]: 读取 N 个 double&lt;/li>
&lt;li>计算 1.2 * a[i]: 计算 N 个乘法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>double result_ 2= a[i] * b[i]&lt;/code>:
&lt;ul>
&lt;li>读取 a[i]、b[i]: 读取 2N 个 double（ 在前面计算 1.2 * a[i] 时已经读取了 a[i]，这个值应该已经在缓存中了，不过这里我们还是当成一次读取）&lt;/li>
&lt;li>计算 a[i] * b[i]: 计算 N 个乘法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>double result_3 = result_1 + result_2&lt;/code>:
&lt;ul>
&lt;li>计算 result_1 + result_2: 计算 N 个加法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>c[i] = result_3;&lt;/code>:
&lt;ul>
&lt;li>读取 c[i]: 读取 N 个 double&lt;/li>
&lt;li>将 result_3 写入 c[i]: 写入 N 个 double&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="213-开销">2.1.3. 开销
&lt;/h3>&lt;ol>
&lt;li>在每轮循环中创建 result_1、result_2、result_3，使用后立刻销毁(开销可忽略不计)&lt;/li>
&lt;li>读取 4000 = 3N = N + 2N + N 个 double&lt;/li>
&lt;li>写入 1000 = N 个 double 写入&lt;/li>
&lt;li>计算: 乘法 2000 = 2N; 加法 1000 = N&lt;/li>
&lt;/ol>
&lt;h2 id="22-操作符重载">2.2 操作符重载
&lt;/h2>&lt;h3 id="221-代码实现">2.2.1 代码实现
&lt;/h3>&lt;p>&lt;a class="link" href="./array/operator.h" >./array/operator.h&lt;/a> &lt;code>namespace array_operator_overload&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">array_operator_overload&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StdArray&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">StdArray&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">StdArray&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Array&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StdArray&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">StdArray&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">StdArray&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Array&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="c1">// namespace array_operator_overload
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="222-使用方法">2.2.2 使用方法
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;array/operator.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">array_operator_overload&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StdArray&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="223-执行步骤">2.2.3 执行步骤
&lt;/h3>&lt;ol>
&lt;li>&lt;code>StdArray result_1 = 1.2 * a;&lt;/code>: 即 &lt;code>operator*&amp;lt;double, StdArray&amp;gt;(1.2, a)&lt;/code>
&lt;ul>
&lt;li>创建临时变量 StdArray result_1: 创建 N 个 double&lt;/li>
&lt;li>读取 a: 读取 N 个 double&lt;/li>
&lt;li>计算 1.2 * a[i]: 计算 N 个乘法
将计算结果写入 result_1: 写入 N 个 double&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StdArray result_2 = a * b;&lt;/code>: 即 &lt;code>operator*&amp;lt;StdArray, StdArray&amp;gt;(a, b)&lt;/code>
&lt;ul>
&lt;li>创建临时变量 StdArray result_2: 创建 N 个 double&lt;/li>
&lt;li>读取 a、b: 读取 2 * N 个 double&lt;/li>
&lt;li>计算 a[i] * b[i]: 计算 N 个乘法&lt;/li>
&lt;li>计算结果写入 result_2: 写入 N 个 double&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StdArray result_3 = result1 + result_2;&lt;/code>: 即 &lt;code>operator+&amp;lt;StdArray, StdArray&amp;gt;(result_1, result_2)&lt;/code>
&lt;ul>
&lt;li>创建临时变量 StdArray result_3: 创建 N 个 double&lt;/li>
&lt;li>读取 result_1、result_2: 读取 2 * N 个 double&lt;/li>
&lt;li>计算 result_1[i] + result_2[i]: 计算 N 个加法&lt;/li>
&lt;li>计算结果写入 result_3: 写入 N 个 double&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StdArray c = {return result_3;};&lt;/code>:
&lt;ul>
&lt;li>如果编译器支持 copy elision, 应该没有开销&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="224-开销">2.2.4 开销
&lt;/h3>&lt;ol>
&lt;li>先后创建 3 个临时变量 StdArray result_1, result_2, result_3: 创建 3 * N 个 double&lt;/li>
&lt;li>读取 5000 = 5N = N + 2 * N + 2 * N 个 double&lt;/li>
&lt;li>写入 3000 = 3N 个 double&lt;/li>
&lt;li>计算: 乘法 2000 = 2N; 加法 1000 = N&lt;/li>
&lt;/ol>
&lt;h2 id="23-表达式模板expression-template-et">2.3 表达式模板(expression template; ET)
&lt;/h2>&lt;h3 id="231-代码实现">2.3.1 代码实现
&lt;/h3>&lt;p>&lt;a class="link" href="./array/expression_template/expression.h" >./array/expression_template/expression.h&lt;/a> &lt;code>namespace array_expression_template&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// array/expression_template/expression.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">namespace&lt;/span> &lt;span class="n">array_expression_template&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Expression&lt;/span> &lt;span class="p">{};&lt;/span> &lt;span class="c1">// Expression
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">item_type: 数据类型，本文中就是 double
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Variable&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">item_type&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">t_&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">t_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span> &lt;span class="c1">// Variable, 存储常量 T
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ArrayLike&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Array&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">item_type&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">t_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">t_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span> &lt;span class="c1">// Array, 存储向量引用(可以是 std::array/std::vector 或者自定义的符合 concept ArrayLike 的自定义 类型)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IsExpr&lt;/span> &lt;span class="n">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IsExpr&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">BinaryExpression&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">LExpr&lt;/span> &lt;span class="n">l_expr_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">RExpr&lt;/span> &lt;span class="n">l_expr_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span> &lt;span class="c1">// BinaryExpression, 存储二元操作符的左右两个表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IsExpr&lt;/span> &lt;span class="n">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IsExpr&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Add&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">BinaryExpression&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">item_type&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">l_expr_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">r_expr_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span> &lt;span class="c1">// Add
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IsExpr&lt;/span> &lt;span class="n">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IsExpr&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Multiply&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">BinaryExpression&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">item_type&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">l_expr_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">r_expr_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span> &lt;span class="c1">// Multiply
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// array/expression_template/operator.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IsExpr&lt;/span> &lt;span class="n">LExr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IsExpr&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">LExpr&lt;/span> &lt;span class="n">l_expr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">RExpr&lt;/span> &lt;span class="n">r_expr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l_expr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r_expr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IsExpr&lt;/span> &lt;span class="n">LExr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IsExpr&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">LExpr&lt;/span> &lt;span class="n">l_expr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">RExpr&lt;/span> &lt;span class="n">r_expr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">Multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l_expr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r_expr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// more operator overload for Variable and Array
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="c1">// namespace array_expression_template
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="232-使用方法">2.3.2 使用方法
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;array/expression_template/expression.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">array_expression_template&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Array&lt;/span> &lt;span class="nf">arr_a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">arr_b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">expr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr_a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">arr_a&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr_b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StdArray&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">collect_result&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="233-执行步骤">2.3.3 执行步骤
&lt;/h3>&lt;ol>
&lt;li>&lt;code>auto expr_1 = 1.2 * arr_a;&lt;/code>: 即 &lt;code>operator*&amp;lt;double, Array&amp;gt;(1.2, arr_a)&lt;/code>
&lt;ul>
&lt;li>创建临时变量 expr_1: 具体类型 &lt;code>Multiply&amp;lt;Variable&amp;lt;double&amp;gt;, Array&amp;lt;StdArray&amp;gt;&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>auto expr_2 = arr_a * arr_b;&lt;/code>: 即 &lt;code>operator*&amp;lt;Array, Array&amp;gt;(arr_a, arr_b)&lt;/code>
&lt;ul>
&lt;li>创建临时变量 expr_2: 具体类型 &lt;code>Multiply&amp;lt;Array&amp;lt;StdArray&amp;gt;, Array&amp;lt;StdArray&amp;gt;&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>auto expr = expr_1 + expr_2;&lt;/code>: 即 &lt;code>operator+&amp;lt;decltype(expr_1), decltype(expr_2)&amp;gt;(expr_1, expr_2)&lt;/code>
&lt;ul>
&lt;li>创建变量 expr: 具体类型
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Add&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Multiply&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Variable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StdArray&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Multiply&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StdArray&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StdArray&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>collect_result(expr, &amp;amp;c)&lt;/code>: 像&lt;a href="#jump表达式计算">表达式计算&lt;/a>一样进行计算&lt;code>1.2 * a[i] + a[i] * b[i]&lt;/code> 并将结果赋值给 c[i]&lt;/li>
&lt;/ol>
&lt;h3 id="234-开销">2.3.4 开销
&lt;/h3>&lt;ol>
&lt;li>我们创建了一些表达式对象
&lt;ul>
&lt;li>两个 Array: 即 &lt;code>Array arr_a(a), arr_b(b);&lt;/code>&lt;/li>
&lt;li>&lt;code>auto expr&lt;/code>: 根据前面描述的 expr 的具体类型，一共创建了 1 个 Add，2 个 Multiply，3 个 Array，1 个 Variable，共 7 个表达式对象（Instance of &lt;code>class Expression&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在 &lt;code>collect_result&lt;/code> 中，我们通过 &lt;code>operator[]&lt;/code> 从表达式中取值，此时 &lt;code>operator[]&lt;/code> 中的 &lt;code>l_expr_&lt;/code> 和 &lt;code>r_expr_&lt;/code> 继续调用对应表达式的 &lt;code>operator[]&lt;/code>，直到从 &lt;code>Variable&lt;/code> 和 &lt;code>Array&lt;/code> 返回具体的数值，此时表达式对象一共调用了 7 次重载的 &lt;code>operator[]&lt;/code>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h1 id="3-方案对比">3. 方案对比
&lt;/h1>&lt;h2 id="31-对比分析">3.1 对比分析
&lt;/h2>&lt;p>表达式 &lt;code>1.2 * a + a * b&lt;/code> 中一共有 1 个常量、3 个 StdArray 和 3 个操作符。&lt;/p>
&lt;blockquote>
&lt;p>现定义如下变量
x : 表达式中的常量个数
y : 表达式中 StdArray 的个数
z : 表达式中的操作符个数
其中 x + y = z + 1&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>表达式方案：
&lt;ul>
&lt;li>y: 读取 2 次 a，1 次 b&lt;/li>
&lt;li>z: 计算 2 次乘法，1 次加法&lt;/li>
&lt;li>1: 写入 1 次结果到 StdArray c&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>操作符重载方案：
&lt;ul>
&lt;li>y: 读取 2 次 a，1 次 b&lt;/li>
&lt;li>z: 计算 2 次乘法，1 次加法&lt;/li>
&lt;li>z: 调用 3 次重载函数&lt;/li>
&lt;li>z - 1: 生成 2 个最终会被调回的临时对象（最后一个临时变量会通过 copy elision 赋值给我们想要的结果 &lt;code>StdArray c&lt;/code>）&lt;/li>
&lt;li>z - 1: 读取 2 次临时对象: 除了最后一次重载函数调用，其他的每次重载函数调用的结果都会写入一个临时对象，而这个临时对象一定会再下一个函数调用中读取&lt;/li>
&lt;li>z: 写入 3 次结果到 StdArray&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ET 方案：
&lt;ul>
&lt;li>y: 读取 2 次 a，1 次 b&lt;/li>
&lt;li>z: 计算 2 次乘法，1 次加法&lt;/li>
&lt;li>x: 生成 1 个 Variable 对象&lt;/li>
&lt;li>y: 生成 3 个 Array 对象&lt;/li>
&lt;li>z: 生成 3 个 BinaryExpression 对象&lt;/li>
&lt;li>z: 调用 3 次 BinaryExpression 的 &lt;code>operator[]&lt;/code> 重载函数&lt;/li>
&lt;li>y: 调用 3 次 Array 的 &lt;code>operator[]&lt;/code> 重载函数&lt;/li>
&lt;li>x: 调用 1 次 Variable 的 &lt;code>operator[]&lt;/code> 重载函数&lt;/li>
&lt;li>写入 1 次结果到 StdArray c&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>表达式方案&lt;/th>
&lt;th>操作符重载方案&lt;/th>
&lt;th>ET 方案&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>读取已有的 StdArray 次数&lt;/td>
&lt;td>y&lt;/td>
&lt;td>y&lt;/td>
&lt;td>y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数值计算次数&lt;/td>
&lt;td>z&lt;/td>
&lt;td>z&lt;/td>
&lt;td>z&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>写入 StdArray 次数&lt;/td>
&lt;td>1&lt;/td>
&lt;td>z&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>生成最终可以被销毁的对象个数&lt;/td>
&lt;td>0&lt;/td>
&lt;td>z - 1&lt;/td>
&lt;td>x + y + z&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>写入最在可被销毁的对象的次数&lt;/td>
&lt;td>0&lt;/td>
&lt;td>z - 1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>重载函数调用次数&lt;/td>
&lt;td>0&lt;/td>
&lt;td>z&lt;/td>
&lt;td>x + y + z&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="32-对比测试">3.2 对比测试
&lt;/h2>&lt;p>测试使用的表达式更复杂(不是&lt;code>1.2 * a + a * b&lt;/code>)&lt;/p>
&lt;ol>
&lt;li>相关代码与结果
&lt;ul>
&lt;li>test: &lt;a class="link" href="./test_array/calculation_test.cc" >test_array/calculation_test.cc&lt;/a>&lt;/li>
&lt;li>benchmark:
&lt;ul>
&lt;li>代码 &lt;a class="link" href="./test_array/calculation_benchmark.cc" >test_array/calculation_benchmark.cc&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../../attachment/expression_template_array/output/expression_template_array_benchmark.extra_info" >机器信息&lt;/a>&lt;/li>
&lt;li>结果 &lt;a class="link" href="../../attachment/expression_template_array/output/expression_template_array_benchmark_g&amp;#43;&amp;#43;.txt" >expression_template_array_benchmark.txt&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>profile:
&lt;ul>
&lt;li>代码 &lt;a class="link" href="./test_array/calculation_profile.cc" >test_array/calculation_profile.cc&lt;/a>&lt;/li>
&lt;li>结果 &lt;a class="link" href="../../attachment/expression_template_array/output/expression_template_array_profile_g&amp;#43;&amp;#43;.svg" >expression_template_array_profile_g++.svg&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>结果分析
&lt;ul>
&lt;li>表达式方案最优(看 benchmark 和 profile 结果)，因为直接从 StdArray 取值并计算表达式，没有函数其他函数调用、较大的临时变量生成等问题，另外，可能还有编译期优化计算。该方案中调用 &lt;code>std::array operator[]&lt;/code> 耗时占比也比较大&lt;/li>
&lt;li>操作符重载和 ET 方案都有较多的函数调用(看 profile 结果)&lt;/li>
&lt;li>ET 方案主要耗时在调用函数 &lt;code>operator[]&lt;/code>(看 profile 结果)，生成表达式耗时并不怎么耗时(看 benchmark 结果)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h1 id="4-et-方案说明">4. ET 方案说明
&lt;/h1>&lt;h2 id="41-方案说明">4.1 方案说明
&lt;/h2>&lt;ol>
&lt;li>lazy evaluation(惰性计算、延时计算): 一开始只是生成了表达式的实例(Add&amp;lt;Multiply, Multiply&amp;gt; expr)，并没有将结果正真的计算出来，等到 &lt;code>collect_result&lt;/code> 时才开始遍历计算&lt;/li>
&lt;/ol>
&lt;h2 id="42-在实现过程中用到的优化手段">4.2 在实现过程中用到的优化手段
&lt;/h2>&lt;ol>
&lt;li>对 &lt;code>size()&lt;/code> 和 &lt;code>operator[]&lt;/code> 使用 inline 关键字&lt;/li>
&lt;li>在 &lt;code>class BinaryExpression&lt;/code> 中存储 size，而不是每次在调用 &lt;code>size()&lt;/code> 时根据 l_expr_ 和 r_expr_ 去判断(像其构造函数中的 assert 那样)&lt;/li>
&lt;li>使用 &lt;code>class Add&lt;/code> 继承 &lt;code>class BinaryExpression&lt;/code>，而不是将 &lt;code>AddOperator&lt;/code> 当成 BinaryExpression 的一个模板参数，因为这样会多一次 &lt;code>operator()&lt;/code> 函数调用
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bad
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IsExpr&lt;/span> &lt;span class="n">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IsExpr&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Op&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">requires&lt;/span> &lt;span class="n">SameItem&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BinaryExpression&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">item_type&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">Op&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l_expr_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">r_expr_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">AddOperator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">operator&lt;/span>&lt;span class="p">()(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">lhs&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">RExpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">Add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Binary&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RExpr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AddOperator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LExpr&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">item_type&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h1 id="5-参考">5. 参考
&lt;/h1>&lt;ul>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/701819779" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/701819779&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/416276856" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/416276856&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/chengxuyuancc/p/3238469.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/chengxuyuancc/p/3238469.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Expression-template" target="_blank" rel="noopener"
>https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Expression-template&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>